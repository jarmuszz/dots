#+TITLE: Emacs Configuration

#+PROPERTY: header-args :tangle conf.el
#+STARTUP: content

* Requires
#+begin_src elisp
  (eval-when-compile
    (dolist (lib '(server cl-lib)) (require lib)))
#+end_src
* Meta
#+begin_src elisp
  ;;  -*- lexical-binding:t -*-
  (defun add-multiple-hooks (modes hook)
    (dolist (mode modes)
      (add-hook mode hook)))
  
  (defmacro lambda-interactive (args body)
    `(lambda ,args (interactive) ,body))

  (defmacro defun-interactive (name args body)
    `(defun ,name ,args (interactive) ,body))
  #+end_src
* Tangle Init
#+begin_src emacs-lisp
  (defvar user/conf-org-file (concat user-emacs-directory "conf.org"))
  (defvar user/conf-el-file (concat user-emacs-directory "conf.el"))
  (defvar user/conf-elc-file (concat user-emacs-directory "conf.elc"))

  (defun retangle-conf ()
    (interactive)
    (when (equal (buffer-file-name)
                 (expand-file-name user/conf-org-file))
      (let ((prog-mode-hook nil))
        (and
          (org-babel-tangle)
          (byte-compile-file user/conf-el-file)
          (load user/conf-elc-file)))))
  (add-hook 'after-save-hook 'retangle-conf)

  (defun reload-config ()
    (interactive)
    (load user/conf-elc-file))
#+end_src
* Plugins
I'm using [[https://github.com/raxod502/straight.el][straight.el]] to manage my plugins.
** Init
#+begin_src elisp
  (load (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory)  nil 'nomessage)

  (defun straight-use-packages (&rest recipes)
    (mapcar 'straight-use-package recipes))

  (let ((pkglist
         '(;; Look
           (base16-theme :local-repo "base16-emacs")
           (ligature.el :type git :host github :repo "mickeynp/ligature.el")
           all-the-icons
           highlight-indent-guides
           org-superstar

           ;; Language support
           d-mode
           fvwm-mode
           geiser
           merlin
           meson-mode
           scala-mode
           slime
           tree-sitter
           tree-sitter-langs
           tuareg

           ;; Utility
           company
           edit-server
           eglot
           good-scroll
           helm
           magit
           neotree
           projectile
           undo-tree
           yasnippet
           )))
    (dolist (pkg pkglist) (straight-use-package pkg)))
#+end_src
** Foreign
*** Company mode
#+begin_src elisp
  (setq company-tooltip-align-annotations t)
  (setq company-idle-delay 0)

  (add-hook 'after-init-hook 'global-company-mode)
  
  (global-set-key (kbd "C-M-i") 'company-complete)
#+end_src
*** Ident guides
#+begin_src elisp
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)

  (custom-set-variables
   '(highlight-indent-guides-method 'character))
#+end_src

*** Ligatures
#+begin_src elisp
  (ligature-set-ligatures 't
    '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
      ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
      "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
      "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
      "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
      "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
      "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
      "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
      ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
      "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
      "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
      "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
      "\\\\" "://"))
#+end_src
*** Neotree
#+begin_src elisp
  (require 'neotree)
  (setq neo-theme 'icons)
  (global-set-key [f12] 'neotree-toggle)
#+end_src

*** Projectile
#+begin_src elisp
  (require 'projectile)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (setq projectile-project-search-path '("~/prj"))
  (setq projectile-indexing-method 'native)
  (projectile-register-project-type 'dlang-dub '("dub.sdl" "dub.json")
                    :project-file "dub.sdl"
                    :compile "dub build"
                    :src-dir "src/"
                    :test "dub test"
                    :run "dub run")
#+end_src
*** Tree sitter
#+begin_src elisp
  (defun tree-sitter-require-multiple (&rest body)
    (mapc #'tree-sitter-require body))

  (tree-sitter-require-multiple
   'c
   'cpp
   'bash
   'd
   'ocaml
   'scala
   )

  (add-multiple-hooks
   '(c-mode-common-hook
     shell-mode-hook
     d-mode-hook
     tuareg-mode-hook
     scala-mode-hook
     )
   #'tree-sitter-hl-mode)

#+end_src
*** Undo tree
#+begin_src elisp
  (global-set-key (kbd "C-?") #'undo-tree-redo)
#+end_src

** Built-in
*** Recent File Mode
#+begin_src elisp
  (require 'recentf)
  (setq recentf-max-menu-items 20)
  (setq recentf-max-saved-items 20)
  (global-set-key (kbd "C-c r") #'recentf-open-files)
#+end_src
*** Show Paren mode
#+begin_src elisp
(setq show-paren-delay 0)
#+end_src
*** Menu-bar mode
#+begin_src elisp
  (menu-bar-mode 1)
  (setq imenu-auto-rescan t)

  (add-multiple-hooks
   '(prog-mode-hook
     org-mode-hook
     emacs-lisp-mode-hook
     )
            #'(lambda ()
                (interactive)
                (imenu-add-to-menubar "Imenu")))
#+end_src

*** Org-mode
#+begin_src elisp
  (setq
   org-hide-emphasis-markers t
   org-superstar-leading-bullet ?\s
   org-hide-leading-stars t
   org-startup-with-inline-images t)

  (setq-default line-spacing 3)

  (add-hook 'org-mode-hook
    #'(lambda () (plist-put org-format-latex-options :scale 1.5)))
  (add-hook 'org-mode-hook 'org-toggle-pretty-entities)
  (add-hook 'org-mode-hook 'org-superstar-mode)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

*** DocView
#+begin_src elisp
(add-hook 'doc-view-mode-hook #'auto-revert-mode)
#+end_src
** Disable/Enable
- Requires
#+begin_src elisp
(require 'eglot)
#+end_src

- Simple enable
#+begin_src elisp
(edit-server-start)
(global-ligature-mode t)
(global-undo-tree-mode)
(good-scroll-mode 1)
(projectile-mode 1)
(recentf-mode 1)
(show-paren-mode)
#+end_src

- Disable defaults
#+begin_src elisp 
(scroll-bar-mode 0)
(tool-bar-mode 0)
#+end_src
* Utils
** Indentation
#+begin_src elisp
  (defun-interactive retab ()
    (save-excursion
      (beginning-of-line)
      (delete-horizontal-space)
      (indent-for-tab-command)))

  (defun-interactive untab ()
    (save-excursion
      (beginning-of-line)
      (delete-horizontal-space)))

  (defun-interactive hardindent ()
    (save-excursion
      (beginning-of-line)
      (insert "\t")))
#+end_src
** Miscellaneous
Marker
#+begin_src elisp
  (defun-interactive marker-colorize ()
    (overlay-put
     (make-overlay (region-beginning) (region-end))
     'face `(:background "#e67e80" :foreground "#2b3339" :weight bold )))

  (defun-interactive marker-erase ()
    (remove-overlays (region-beginning) (region-end)))
#+end_src
* Languages
** C and C++
I guess this is not needed
#+begin_src elisp
  (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
#+end_src
Why isn't this the default?
#+begin_src elisp
  (add-multiple-hooks
   '(c-mode-hook c++-mode-hook)
    'eglot-ensure)
#+end_src
#+begin_src elisp
  (setq c-syntactic-indentation nil)
#+end_src
** OCaml
#+begin_src elisp
  (add-multiple-hooks
   '(tuareg-mode-hook)
    'eglot-ensure)

  (add-hook 'tuareg-mode-hook 'merlin-mode)
#+end_src
** Scala
#+begin_src elisp
#+end_src
* Miscellaneous options
** Auto-save
#+begin_src elisp
  (defvar autosave-dir (concat user-emacs-directory "autosave/"))
  (make-directory autosave-dir t)
#+end_src

** Backups
#+begin_src elisp
  (setq make-backup-files nil)
#+end_src

** Emacsclient
#+begin_src elisp
  ;; Fixes for emacsclient
  (add-hook 'after-make-frame-functions 
    #'(lambda (_)  
        (set-frame-font "Liga Go Mono 10" nil t)		; Fixes font issues
        ))

  (when (server-running-p)
    (global-set-key (kbd "C-x C-c")
                    #'(lambda ()
                        (delete-frame))))

#+end_src
* Look and Feel
** Theme
#+begin_src elisp
  (setq-default left-margin-width 1 right-margin-width 1)
  
  (add-hook 'emacs-startup-hook 
    #'(lambda ()
        (interactive)
        (when (or (server-running-p) (display-graphic-p))
          (require 'base16-theme)
          (set-fringe-mode 0)
          (custom-set-variables
            '(base16-highlight-mode-line 'box))
          (load-theme 'base16-everforest t))))
#+end_src

** Font
#+begin_src elisp
  (set-frame-font "Liga Go Mono 10" nil t)
#+end_src

** Start fullscreen
#+begin_src elisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** Indent
#+begin_src elisp
  (defvar tab-width 4)

  (defun enable-tabs ()
    (interactive)
    (local-set-key (kbd "<tab>") 'tab-to-tab-stop)
    (setq indent-tabs-mode t))

  (defun disable-tabs ()
    (interactive)
    (local-set-key (kbd "<tab>") 'indent-for-tab-command)
    (setq indent-tabs-mode nil))

  (add-multiple-hooks
   '(cc-mode-hook
    )
   'enable-tabs)

  (add-multiple-hooks
    '(lisp-mode-hook
      emacs-lisp-mode-hook
      scheme-mode-hook
      fvwm-mode-hook
      tuareg-mode-hook
     )
    'disable-tabs)
#+end_src

** Misc kbds
*** Helm
#+begin_src elisp
  (global-set-key (kbd "M-x") 'helm-M-x)	
  (global-set-key (kbd "C-x b") 'helm-buffers-list)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
  (global-set-key (kbd "C-x m") 'helm-mark-ring)
#+end_src
*** Whitespace
#+begin_src elisp
  (global-set-key (kbd "M-\\") #'untab)
  (global-set-key (kbd "C-<tab>") #'retab)
  (global-set-key (kbd "M-<tab>") #'hardindent)
#+end_src
*** Other
#+begin_src elisp
  (global-set-key (kbd "C-j") 'join-line)
  (global-set-key (kbd "<f5>") 'compile)
  (global-set-key (kbd "S-<mouse-2>") 'eval-region)
  (global-set-key (kbd "C-,") 'repeat-complex-command)
#+end_src
