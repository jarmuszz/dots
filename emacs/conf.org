Local Variables:
eval: (ispell-change-dictionary "american")
eval: (flyspell-mode)
End:

#+PROPERTY: header-args :tangle conf.el
#+STARTUP: content

* Tangle Init
#+begin_src emacs-lisp
  (defvar user/conf-org-file (concat user-emacs-directory "conf.org"))
  (defvar user/conf-el-file (concat user-emacs-directory "conf.el"))
  (defvar user/conf-elc-file (concat user-emacs-directory "conf.elc"))

  (defun tangle-conf ()
    (when (equal (buffer-file-name)
                 (expand-file-name user/conf-org-file))
      (let ((prog-mode-hook nil))
        (org-babel-tangle)
        (byte-compile-file user/conf-el-file)
        (load user/conf-elc-file))))
  (add-hook 'after-save-hook 'tangle-conf)
#+end_src

* Meta
#+begin_src elisp
(defmacro add-multiple-hooks (modes hook)
  `(mapc (lambda (mode)
           (add-hook mode ,hook))
        ,modes))

;(defmacro global-set-keys (map &rest body)
;  (loop for (key . lambda) in ,@body
;(require 'cl-lib)
;(defun define-multiple-keys (keymap &rest body)
;  (loop for (key . proc) in body
;    do `(define-key ,keymap (kbd key) #'(lambda () (message (format nil "~s" proc))))))

#+end_src

* Plugins
I'm using [[https://github.com/raxod502/straight.el][straight.el]] to manage my plugins.
** Foreign
*** Init
#+begin_src elisp
  (load (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory)  nil 'nomessage)

  (defun straight-use-packages (&rest recipes)
    (mapcar 'straight-use-package recipes))

  (straight-use-packages
   'xresources-theme
   'undo-tree
   'helm
   'ivy
   'eglot
   '(acme-search
     :local-repo "acme-search")
   '(base16-theme
     :local-repo "base16-emacs")
   'all-the-icons
   'neotree
   'minimap
   'meson-mode
   'geiser
   'highlight-indent-guides
   'slime
   'd-mode
   'good-scroll
   'fvwm-mode
   'edit-server
   'projectile
   'god-mode
   'tuareg
   'merlin
   )
#+end_src
*** Acme Search
#+begin_src elisp
(require 'acme-search)
(global-set-key (kbd "<mouse-3>") 'acme-search-forward)
(global-set-key (kbd "S-<mouse-3>")'acme-search-backward)
#+end_src
*** Edit server
#+begin_src elisp
(edit-server-start)
#+end_src

*** Eglot
#+begin_src elisp
  (require 'eglot)
  (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
  (add-multiple-hooks
    '(c-mode-hook c++-mode-hook)
    'eglot-ensure)
#+end_src

*** God mode
#+begin_src elisp
(require 'god-mode)
(global-set-key (kbd "<escape>") #'god-local-mode)

(define-key god-local-mode-map (kbd ".") #'repeat)
(define-key god-local-mode-map (kbd "i") #'god-local-mode)
(define-key god-local-mode-map (kbd "(") 
  #'(lambda ()
      (interactive)
      (insert-parentheses)
      (god-local-mode 0)))
(define-key god-local-mode-map (kbd "K") #'kill-rectangle)

(define-key god-local-mode-map (kbd "I")
  #'(lambda ()
      (interactive)
      (delete-char 1)
      (god-local-mode 0)))

(define-key god-local-mode-map (kbd "S-SPC") #'rectangle-mark-mode)

(add-hook 'post-command-hook
  #'(lambda ()
      (setq cursor-type (if god-local-mode 'box 'bar))))
#+end_src
*** Good scroll
#+begin_src elisp
  (good-scroll-mode 1)
#+end_src

*** Ident guides
#+begin_src elisp
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)

  (custom-set-variables
   '(highlight-indent-guides-method 'character))
#+end_src

*** Ivy
#+begin_src elisp
  (ivy-mode)
#+end_src

*** Minimap
#+begin_src elisp
  ;(require 'minimap)
  (custom-set-faces
   '(minimap-font-face ((t (:height 36 :family "Terminus (TTF)")))))
  (custom-set-variables
    '(minimap-window-location 'right))
#+end_src

*** Neotree
#+begin_src elisp
  (require 'neotree)
  (setq neo-theme 'icons)
  (global-set-key [f12] 'neotree-toggle)
#+end_src

*** Projectile
#+begin_src elisp
  (require 'projectile)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (setq projectile-project-search-path '("~/prj"))
  (setq projectile-indexing-method 'native)
  (projectile-register-project-type 'dlang-dub '("dub.sdl" "dub.json")
                    :project-file "dub.sdl"
                    :compile "dub build"
                    :src-dir "src/"
                    :test "dub test"
                    :run "dub run")
  (projectile-mode +1)
#+end_src
*** Undo tree
#+begin_src elisp
  (global-undo-tree-mode)
  (global-set-key (kbd "C-?") #'undo-tree-redo)
#+end_src


** Built-in
*** Recent File Mode
#+begin_src elisp
  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 20)
  (setq recentf-max-saved-items 20)
  (global-set-key (kbd "C-c r") #'recentf-open-files)
#+end_src
*** Show Paren mode
#+begin_src elisp
(setq show-paren-delay 0)
(show-paren-mode)
#+end_src
*** Tool-bar mode
#+begin_src elisp
  (tool-bar-mode 0)
#+end_src

*** Menu-bar mode
#+begin_src elisp
  (menu-bar-mode 0)
#+end_src

*** Scroll-bar mode
#+begin_src elisp
  (scroll-bar-mode 0)
#+end_src

*** Org-mode
#+begin_src elisp
  (setq org-hide-emphasis-markers t)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

*** DocView
#+begin_src elisp
(add-hook 'doc-view-mode-hook #'auto-revert-mode)
#+end_src
* Miscellaneous options
** Auto-save
#+begin_src elisp
  (defvar autosave-dir (concat user-emacs-directory "autosave/"))
  (make-directory autosave-dir t)
#+end_src

** Backups
#+begin_src elisp
  (setq make-backup-files nil)
#+end_src

** Emacsclient
#+begin_src elisp
  ;; Fixes for emacsclient
  (add-hook 'after-make-frame-functions 
    #'(lambda (_)  
        (set-frame-font "Terminus (TTF) 12" nil t)		; Fixes font issues
	))
#+end_src
* Look and Feel
** Theme
#+begin_src elisp
(eval-when-compile (require 'server))
(add-hook 'emacs-startup-hook 
  #'(lambda ()
      (interactive)
      (when (or (server-running-p) (display-graphic-p))
        (require 'base16-theme)
        (set-fringe-mode 0)
        (custom-set-variables
          '(base16-highlight-mode-line 'box))
        (load-theme 'base16-irix t))))
#+end_src

** Font
#+begin_src elisp
  (set-frame-font "Terminus (TTF) 12" nil t)
#+end_src

** Start fullscreen
#+begin_src elisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** Indent
#+begin_src elisp
  (defvar tab-width 4)

  (defun enable-tabs ()
    (interactive)
    (local-set-key (kbd "TAB") 'tab-to-tab-stop)
    (setq indent-tabs-mode t))

  (defun disable-tabs ()
    (interactive)
    (local-set-key (kbd "TAB") 'indent-for-tab-command)
    (setq indent-tabs-mode nil))

  (add-multiple-hooks
   '(prog-mode-hook
     cc-mode-hook
    )
   'enable-tabs)

  (add-multiple-hooks
    '(lisp-mode-hook
      elisp-mode-hook
      scheme-mode-hook
      fvwm-mode-hook
     )
    'disable-tabs)

  (setq c-syntactic-indentation nil)
#+end_src

** Misc kbds
*** Helm
#+begin_src elisp
  (global-set-key (kbd "M-x") 'helm-M-x)	
  (global-set-key (kbd "C-x b") 'helm-buffers-list)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x m") 'helm-mark-ring)
#+end_src
*** Other
#+begin_src elisp
(global-set-key (kbd "C-j") 'join-line)
(global-set-key (kbd "<f5>") 'compile)
#+end_src
